{"version":3,"sources":["constant.ts","components/Title/styles.tsx","components/Title/index.tsx","App.tsx","global-styles/GlobalStyle.tsx","serviceWorker.ts","index.tsx"],"names":["STATIC_URL","Title","styled","div","TokkiContainer","tokkiRotate","keyframes","upDown","Tokki","img","fade","ReactContainer","ReactName","ReactImg","ReactGif","CContainer","CName","CImg","UnityContainer","UnityImg1","UnityImg2","UnityName","src","App","GlobalStyle","createGlobalStyle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+NAAaA,EAET,uGAFSA,EAIT,uGAJSA,EAKA,uGALAA,EAMA,uGANAA,EAOA,uGAPAA,EAQJ,uGARIA,EASC,uGATDA,EAUC,uGAVDA,EAWC,uGAXDA,EAYH,uGAZGA,EAaC,uG,i1HCVP,IAAMC,EAAQC,IAAOC,IAAV,IAMQH,EAAoCA,GAIjDI,EAAiBF,IAAOC,IAAV,KAUrBE,EAAcC,YAAH,KAQXC,EAASD,YAAH,KAMCE,EAAQN,IAAOO,IAAV,IAIHJ,GAGTK,EAAOJ,YAAH,KAWGK,EAAiBT,IAAOC,IAAV,KASdS,EAAYV,IAAOO,IAAV,IAIPC,EDpDW,KC2DbG,EAAWX,IAAOO,IAAV,IAONF,GAIFO,EAAWZ,IAAOO,IAAV,IAONF,GAIFQ,EAAab,IAAOC,IAAV,KAOVa,EAAQd,IAAOO,IAAV,IAIHC,ED5FW,KCoGbO,EAAOf,IAAOO,IAAV,IAMFF,GAIFW,EAAiBhB,IAAOC,IAAV,KASdgB,EAAYjB,IAAOO,IAAV,IAMPF,GAGFa,EAAYlB,IAAOO,IAAV,IAMPF,GAIFc,GAAYnB,IAAOO,IAAV,IAIPC,ED9IW,KEcXT,OA1Bf,YACE,OADkB,eAEhB,oCACE,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAYqB,IAAKtB,IACjB,kBAAC,EAAD,CAAYsB,IAAKtB,IACjB,kBAAC,EAAD,CAAasB,IAAKtB,KAEpB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAASsB,IAAKtB,IACd,kBAAC,EAAD,CAAQsB,IAAKtB,KAEf,kBAAC,EAAD,KACE,kBAAC,GAAD,CAAasB,IAAKtB,IAClB,kBAAC,EAAD,CAAasB,IAAKtB,IAClB,kBAAC,EAAD,CAAasB,IAAKtB,KAEpB,kBAAC,EAAD,KACE,kBAAC,EAAD,CAASsB,IAAKtB,QCZTuB,OARf,WACE,OACE,oCACE,kBAAC,GAAD,Q,2bCJN,IAyBeC,GAzBKC,YAAH,MCUGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,MACA,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b4e5694c.chunk.js","sourcesContent":["export const STATIC_URL = {\r\n  TITLE_BACKGROUND:\r\n    \"https://user-images.githubusercontent.com/52532871/94314172-f9502300-ffba-11ea-9da3-3fb7ff26e892.png\",\r\n  STAR_BACKGROUND:\r\n    \"https://user-images.githubusercontent.com/52532871/94320344-acbf1480-ffc7-11ea-9e52-a79ccbc52ae1.png\",\r\n  TOKKI_IMG: \"https://user-images.githubusercontent.com/52532871/94315699-fc98de00-ffbd-11ea-8571-13e65fa666fb.gif\",\r\n  REACT_GIF: \"https://user-images.githubusercontent.com/52532871/94317841-16d4bb00-ffc2-11ea-94a6-675ae59604bc.gif\",\r\n  REACT_IMG: \"https://user-images.githubusercontent.com/52532871/94317843-176d5180-ffc2-11ea-99cb-ecf741b8db50.png\",\r\n  C_IMG: \"https://user-images.githubusercontent.com/52532871/94317524-839b8580-ffc1-11ea-86e0-e4129438a9be.png\",\r\n  UNITY_IMG1: \"https://user-images.githubusercontent.com/52532871/94318193-ea6d6e80-ffc2-11ea-91ec-a42b3b6e2ada.png\",\r\n  UNITY_IMG2: \"https://user-images.githubusercontent.com/52532871/94318191-e9d4d800-ffc2-11ea-9c37-f00a8d31c553.png\",\r\n  REACT_NAME: \"https://user-images.githubusercontent.com/52532871/94318877-6f0cbc80-ffc4-11ea-93e0-f77a16bebdb2.png\",\r\n  C_NAME: \"https://user-images.githubusercontent.com/52532871/94318882-6fa55300-ffc4-11ea-8eb6-fffab69cd107.png\",\r\n  UNITY_NAME: \"https://user-images.githubusercontent.com/52532871/94318880-6fa55300-ffc4-11ea-831e-1d5bb1299a19.png\",\r\n};\r\n\r\nexport const BREAKPOINT = 640;\r\n","import styled, { keyframes } from \"styled-components\";\r\nimport { STATIC_URL, BREAKPOINT } from \"../../constant\";\r\n\r\nexport const Title = styled.div`\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 720px;\r\n  background-image: url(${STATIC_URL.STAR_BACKGROUND}), url(${STATIC_URL.TITLE_BACKGROUND});\r\n  background-repeat: repeat-x;\r\n`;\r\n\r\nexport const TokkiContainer = styled.div`\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nconst tokkiRotate = keyframes`\r\n  0% { transform: rotate(45deg) translate(0, 0); }\r\n  25% { transform: rotate(-15deg) translate(-50px, -50px); }\r\n  50% { transform: rotate(45deg) translate(0, 0); }\r\n  75% { transform: rotate(-15deg) translate(50px, 50px); }\r\n  100% { transform: rotate(45deg) translate(0, 0);}\r\n`;\r\n\r\nconst upDown = keyframes`\r\n  0% { transform: translate(0, 0); }\r\n  50% { transform: translate(0, -20px); }\r\n  100% { transform: translate(0, 0);}\r\n`;\r\n\r\nexport const Tokki = styled.img`\r\n  width: 128px;\r\n  height: 168px;\r\n  transform-origin: 64px 84px;\r\n  animation: ${tokkiRotate} 15s ease-in-out infinite;\r\n`;\r\n\r\nconst fade = keyframes`\r\n  0% { opacity: 1; }\r\n  50% { opacity: 0.3; }\r\n  77% { opacity: 0.4; }\r\n  78% { opacity: 0.7; }\r\n  79% { opacity: 0.4; }\r\n  80% { opacity: 0.7; }\r\n  81% { opacity: 0.4; }\r\n  100% { opacity: 1; }\r\n`;\r\n\r\nexport const ReactContainer = styled.div`\r\n  position: relative;\r\n  float: left;\r\n  top: 30%;\r\n  left: 10%;\r\n  width: 160px;\r\n  height: 136px;\r\n`;\r\n\r\nexport const ReactName = styled.img`\r\n  position: relative;\r\n  left: -80px;\r\n  top: 160px;\r\n  animation: ${fade} 4s ease-in-out infinite;\r\n  visibility: hidden;\r\n  @media only screen and (min-width: ${BREAKPOINT}px) {\r\n    visibility: visible;\r\n  }\r\n`;\r\n\r\nexport const ReactImg = styled.img`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 160px;\r\n  height: 136px;\r\n  transform-origin: 80px 68px;\r\n  animation: ${upDown} 3s ease-in-out infinite;\r\n  animation-delay: 1.5s;\r\n`;\r\n\r\nexport const ReactGif = styled.img`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 160px;\r\n  height: 136px;\r\n  transform-origin: 80px 68px;\r\n  animation: ${upDown} 3s ease-in-out infinite;\r\n  animation-delay: 1.5s;\r\n`;\r\n\r\nexport const CContainer = styled.div`\r\n  position: relative;\r\n  float: right;\r\n  top: 20%;\r\n  right: 15%;\r\n`;\r\n\r\nexport const CName = styled.img`\r\n  position: relative;\r\n  left: 40px;\r\n  top: -80px;\r\n  animation: ${fade} 4s ease-in-out infinite;\r\n  animation-delay: 1.5s;\r\n  visibility: hidden;\r\n  @media only screen and (min-width: ${BREAKPOINT}px) {\r\n    visibility: visible;\r\n  }\r\n`;\r\n\r\nexport const CImg = styled.img`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 80px;\r\n  height: 80px;\r\n  animation: ${upDown} 3s ease-in-out infinite;\r\n  animation-delay: 0.5s;\r\n`;\r\n\r\nexport const UnityContainer = styled.div`\r\n  position: relative;\r\n  float: right;\r\n  top: 50%;\r\n  right: 20%;\r\n  width: 100px;\r\n  height: 100px;\r\n`;\r\n\r\nexport const UnityImg1 = styled.img`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100px;\r\n  height: 100px;\r\n  animation: ${upDown} 3s ease-in-out infinite;\r\n`;\r\n\r\nexport const UnityImg2 = styled.img`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  width: 100px;\r\n  height: 100px;\r\n  animation: ${upDown} 3s ease-in-out infinite;\r\n  animation-delay: 0.2s;\r\n`;\r\n\r\nexport const UnityName = styled.img`\r\n  position: relative;\r\n  left: -110px;\r\n  top: 120px;\r\n  animation: ${fade} 4s ease-in-out infinite;\r\n  animation-delay: 0.5s;\r\n  visibility: hidden;\r\n  @media only screen and (min-width: ${BREAKPOINT}px) {\r\n    visibility: visible;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport * as S from \"./styles\";\r\nimport { STATIC_URL } from \"../../constant\";\r\n\r\nfunction Title({}) {\r\n  return (\r\n    <>\r\n      <S.Title>\r\n        <S.ReactContainer>\r\n          <S.ReactImg src={STATIC_URL.REACT_IMG} />\r\n          <S.ReactGif src={STATIC_URL.REACT_GIF} />\r\n          <S.ReactName src={STATIC_URL.REACT_NAME} />\r\n        </S.ReactContainer>\r\n        <S.CContainer>\r\n          <S.CName src={STATIC_URL.C_NAME} />\r\n          <S.CImg src={STATIC_URL.C_IMG} />\r\n        </S.CContainer>\r\n        <S.UnityContainer>\r\n          <S.UnityName src={STATIC_URL.UNITY_NAME} />\r\n          <S.UnityImg2 src={STATIC_URL.UNITY_IMG2} />\r\n          <S.UnityImg1 src={STATIC_URL.UNITY_IMG1} />\r\n        </S.UnityContainer>\r\n        <S.TokkiContainer>\r\n          <S.Tokki src={STATIC_URL.TOKKI_IMG} />\r\n        </S.TokkiContainer>\r\n      </S.Title>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","import React from \"react\";\nimport Title from \"./components/Title\";\n\nfunction App() {\n  return (\n    <>\n      <Title />\n    </>\n  );\n}\n\nexport default App;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n* {\r\n  font-family: 'NanumSquare', sans-serif !important;\r\n  font-display: 'block';\r\n  box-sizing : border-box;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\nhtml {\r\n  font-size : 10px;\r\n}\r\nbody {\r\n  margin: 0;\r\n  width: 100%;\r\n  height: 100vh;\r\n}\r\nbutton {\r\n  cursor: pointer;\r\n}\r\nul {\r\n  list-style-type: none;\r\n  padding : 0;\r\n}\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport GlobalStyle from \"./global-styles/GlobalStyle\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}